#include<math.h>
#include "CImg.h"
#define PI 3.14159265
#define rad PI/180
#define g	9.8		//gravity
#define time_slope  0.01
#define length 1	//unit: m
#define length_2  1	//unit: m
#define m1  1   // unit: Kg
#define m2  1  // unit: Kg
using namespace cimg_library;

int main()
{
	int size_x = 640;
	int size_y = 500;
	int size_z = 1;
	int numberOfColorChannels = 3; // R G B
	unsigned char initialValue = 0;
	//-------define the image and window-------------------------//
	CImg<unsigned char> blank(size_x, size_y, size_z, numberOfColorChannels, initialValue), circle;
	CImgDisplay disp(blank, "Pendulum");


	//----------------Variable define-----------------------------//
	const unsigned char color_circle[] = { 250, 100, 0 }, white[] = { 255,255,255 };
	float x = disp.width() / 2, y = 0 ,x2=0,y2=0;
	float angle_1 = 180, shift_angle_1=0, angle_speed_1 = 0, angular_accelerate_1=0;
	float angle_2 = 0, shift_angle_2=0, angle_speed_2 = 0, angular_accelerate_2=0;
	float angle_rad_1 = angle_1 * rad;
	float angle_rad_2 = angle_2 * rad;
	//-------------------------------------------------------------//
	float num0 ,num1, num2, num3, num4, num5, num6,num7, divition = 0;
	while (!disp.is_closed() && !disp.is_keyQ() && !disp.is_keyESC())
	{
		
	//----------------- acceleration calculation--------------------------//
		
		if (disp.is_keyARROWLEFT())
			printf("Left\n");
		if (disp.is_keyARROWRIGHT())
			printf("Right\n");

		num1 = (-g)*(2 * m1 + m2)*sin(angle_rad_1);
		num2 = m2 * g*sin((angle_rad_1 - (2 * angle_rad_2)));
		num3 = 2 * sin(angle_rad_1 - angle_rad_2)*m2*(angle_speed_2*angle_speed_2*length_2 + angle_speed_1 * angle_speed_1*length*cos(angle_rad_1 - angle_rad_2));
		divition = (2 * m1) + m2 - (m2 * cos((2 * angle_rad_1) - (2 * angle_rad_2)));
		angular_accelerate_1 = (num1 - num2 - num3) / (length*divition);
		
		
		num4 = 2 * sin(angle_rad_1 - angle_rad_2);
		num5 = angle_speed_1 * angle_speed_1*length*(m1 + m2);
		num6 = g * (m1 + m2)*cos(angle_rad_1);
		num7 = angle_speed_2 * angle_speed_2*length_2*m2*cos(angle_rad_1 - angle_rad_2);
		angular_accelerate_2 = (num4*(num5 + num6 + num7)) / (length_2*divition);
		

		//-----------------angle  calculation--------------------------//	
		/*
		angle_speed_1 += angular_accelerate_1 * time_slope;
		shift_angle_1 = angle_speed_1* time_slope +0.5*angular_accelerate_1* time_slope* time_slope;		
		angle_rad_1 += shift_angle_1;		
	


		angle_speed_2 += angular_accelerate_2 * time_slope;
		shift_angle_2 = angle_speed_2*time_slope+0.5*angular_accelerate_2*time_slope*time_slope;	
		angle_rad_2 += shift_angle_2;
		*/

		angle_speed_1 += angular_accelerate_1;
		angle_rad_1 += angle_speed_1;
		angle_speed_2 += angular_accelerate_2;
		angle_rad_2 += angle_speed_2;




		while (angle_rad_1 > PI)
			angle_rad_1 = angle_rad_1 -(2*PI) ;
		while (angle_rad_1 <= -PI)
			angle_rad_1 = angle_rad_1 + (2 * PI);

		while (angle_rad_2 > PI)
			angle_rad_2 = angle_rad_2 - (2 * PI);
		while (angle_rad_2 <= -PI)
			angle_rad_2 = angle_rad_2 + (2 * PI);


		//--------------------------Graphing-------------------------------//
		y = (disp.height() / 2) + 100 * length * cos(angle_rad_1);
		x = (disp.width() / 2) - 100 * length * sin(angle_rad_1);
		y2 = y + 100 * length_2 * cos(angle_rad_2);
		x2 = x - 100 * length_2 * sin(angle_rad_2);

		//----------------------------------------------------------------//
		circle = blank;
		circle.draw_line(disp.width() / 2, disp.height() / 2, x, y, white);
		circle.draw_ellipse(x, y, 10, 10, 0, color_circle);
		circle.draw_line(x, y, x2, y2, white);
		circle.draw_ellipse(x2, y2, 10, 10, 0, color_circle);
		//-------------------------FPS------------------------------------//
		disp.display(circle).wait(6);


		//-------------------------Print Data------------------------------------//
		printf("angle_1 %4f	angle_speed_1=  %4f	angular_accelerate_1= %4f\n", angle_rad_1, angle_speed_1, angular_accelerate_1);
		printf("angle_2 %4f	angle_speed_2=  %4f	angular_accelerate_2= %4f\n", angle_rad_2, angle_speed_2, angular_accelerate_2);
		//-------------------------Changing Windows size------------------------------------//
		if (disp.is_resized())
			blank.resize(disp.resize(disp.window_width() > 200 ? disp.window_width() : 200, disp.height(), false));
	}

	return 0;
}